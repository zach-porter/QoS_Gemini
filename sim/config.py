# sim/config.py
from .service_class import ServiceClass

# Default configuration settings
DEFAULT_CONFIG = {
    # Simulation parameters
    "simulation_duration_sec": 60.0,   # Total simulation time
    "time_step_sec": 0.1,              # Simulation step duration

    # User Terminal parameters
    "ut_config": {
        'packet_rate_pps': 20,          # Average total packets per second generated by the UT
        'packet_size_bytes_avg': 1000,  # Average packet size in bytes
        'packet_size_bytes_stddev': 300,# Standard deviation of packet size
        'service_class_distribution': { # Percentage of packets per class
            ServiceClass.NETWORK_CONTROL: 0.05,     # 5%
            ServiceClass.EXPEDITED_FORWARDING: 0.15,# 15%
            ServiceClass.ASSURED_FORWARDING: 0.30,  # 30%
            ServiceClass.BEST_EFFORT: 0.50          # 50%
        },
        'max_queue_size_packets': 500      # Max packets allowed in each *individual* service class queue
    },

    # Bandwidth parameters
    "bandwidth_type": "static",         # "static" or "dynamic"
    "static_bandwidth_kbps": 1024,      # Kilobits per second (if type is static)
    "dynamic_bw_config": {              # Configuration if type is dynamic
        "base_kbps": 1024,
        "amplitude_kbps": 512,
        "period_sec": 30
    },

    # Scheduler parameters
    "qos_thresholds_percent": {         # Minimum guaranteed bandwidth percentage
        ServiceClass.NETWORK_CONTROL: 10,    # 10%
        ServiceClass.EXPEDITED_FORWARDING: 30,# 30%
        ServiceClass.ASSURED_FORWARDING: 40   # 40%
        # Best Effort gets the remaining (100 - 10 - 30 - 40 = 20%) dynamically
    }
}

def get_default_config():
    """Returns a deep copy of the default configuration."""
    import copy
    return copy.deepcopy(DEFAULT_CONFIG)

def bps_to_bytes_per_step(bps: float, time_step_sec: float) -> int:
    """Converts bits per second to bytes per time step."""
    bytes_per_sec = bps / 8.0
    return int(bytes_per_sec * time_step_sec)